{"ast":null,"code":"import React from 'react';\nimport { useContext } from 'react';\nimport { AuthContext } from '../store/auth-context';\nconst apiKey = 'AIzaSyBrEdevpKRpF13aBB3W8B6ygzm4hA6LLeA';\n\nconst signRequestBody = (email, password) => {\n  return {\n    method: 'POST',\n    body: JSON.stringify({\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n};\n\nexport const AuthApi = {\n  signUP(email, password) {\n    const authCtx = useContext(AuthContext);\n    setIsLoading(true);\n    fetch(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${apiKey}`, signRequestBody(email, password)).then(res => {\n      setIsLoading(false);\n\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          let errorMessage = `Attempt's failed!`;\n\n          if (data && data.error && data.error.message) {\n            if (data.error.message === 'EMAIL_EXISTS') {\n              errorMessage = 'Email already exists';\n            }\n          }\n\n          throw new Error(errorMessage);\n        });\n      }\n    });\n  },\n\n  signIN(email, password) {\n    const authCtx = useContext(AuthContext);\n    isLoading(true);\n    fetch(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${apiKey}`, signRequestBody(email, password)).then(res => {\n      isLoading(false);\n\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          let errorMessage = 'Unsuccessful!';\n\n          if (data && data.error && data.error.message) {\n            if (data.error.message === 'EMAIL_EXISTS' || 'INVALID_PASSWORD') {\n              errorMessage = 'Email or password is incorrect';\n            }\n          }\n\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      authCtx.login(data.idToken);\n    }).catch(err => {\n      alert(err.message);\n    });\n  }\n\n};","map":{"version":3,"sources":["C:/Users/Uch/React/udemy course/authentication/src/api/auth-api.js"],"names":["React","useContext","AuthContext","apiKey","signRequestBody","email","password","method","body","JSON","stringify","returnSecureToken","headers","AuthApi","signUP","authCtx","setIsLoading","fetch","then","res","ok","json","data","errorMessage","error","message","Error","signIN","isLoading","login","idToken","catch","err","alert"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useContext } from 'react';\r\nimport { AuthContext } from '../store/auth-context';\r\n\r\n\r\n\r\n const apiKey ='AIzaSyBrEdevpKRpF13aBB3W8B6ygzm4hA6LLeA';\r\n const signRequestBody = (email, password) => {\r\n     return ({\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n        returnSecureToken: true\r\n    }),\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n })}\r\n\r\n\r\nexport const AuthApi = {\r\n\r\n\r\n\r\n    signUP(email, password) {\r\n\r\n      const authCtx = useContext(AuthContext);\r\n\r\n        setIsLoading(true);\r\n       fetch(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${apiKey}`, signRequestBody(email, password))\r\n       .then( res => {\r\n        setIsLoading(false);\r\n           if(res.ok) {\r\n             return  res.json()\r\n           } else {\r\n            return res.json().then( data => {\r\n                let errorMessage = `Attempt's failed!`\r\n                if(data && data.error && data.error.message) {\r\n                    if (data.error.message === 'EMAIL_EXISTS') {\r\n                    errorMessage = 'Email already exists'\r\n            }}\r\n            throw new Error(errorMessage);\r\n               });\r\n           }\r\n       })\r\n    },\r\n\r\n    signIN(email, password) {\r\n\r\n\r\n      const authCtx = useContext(AuthContext);\r\n        isLoading(true);\r\n       fetch(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${apiKey}`, signRequestBody(email, password))\r\n        .then( res => {\r\n            isLoading(false);\r\n            if(res.ok) {\r\n              return res.json()\r\n            } else {\r\n              return res.json().then( data => {\r\n                  let errorMessage = 'Unsuccessful!'\r\n                  if(data && data.error && data.error.message) {\r\n                    if (data.error.message === 'EMAIL_EXISTS' || 'INVALID_PASSWORD') {\r\n                        errorMessage = 'Email or password is incorrect'\r\n              }}\r\n               throw new Error(errorMessage);\r\n            });\r\n            }\r\n        })\r\n        .then((data) => {\r\n          authCtx.login(data.idToken);\r\n        })\r\n        .catch((err) => {\r\n            alert(err.message)\r\n        })\r\n     }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}