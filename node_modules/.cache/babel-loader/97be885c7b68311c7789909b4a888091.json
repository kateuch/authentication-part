{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Uch\\\\React\\\\udemy course\\\\authentication\\\\src\\\\components\\\\Auth\\\\AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport { authApi } from '../../api/auth-api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './AuthForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthForm = () => {\n  _s();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const emailRef = useRef();\n  const passwordRef = useRef();\n\n  const switchAuthModeHandler = () => {\n    setIsLogin(prevState => !prevState);\n  };\n\n  const onSubmitHandler = event => {\n    event.preventDefault();\n    const userEmail = emailRef.current.value;\n    const userPassword = passwordRef.current.value;\n\n    if (isLogin) {\n      setIsLoading(true);\n      authApi.signIn(userEmail, userPassword).then(res => {\n        setIsLoading(false);\n\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then(data => {\n            let errorMessage = 'Unsuccessful!';\n\n            if (data && data.error && data.error.message) {\n              if (data.error.message === 'EMAIL_NOT_FOUND' || 'INVALID_PASSWORD') {\n                errorMessage = 'Email or password is incorrect';\n              }\n            }\n\n            throw new Error(errorMessage);\n          });\n        }\n      }).then(data => {\n        authCtx.token(data.idToken);\n      }).catch(err => {\n        alert(err.message);\n      });\n    } else {\n      setIsLoading(true);\n      authApi.signUP(userEmail, userPassword).then(res => {\n        setIsLoading(false);\n\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then(data => {\n            let errorMessage = `Attempt's failed!`;\n\n            if (data && data.error && data.error.message) {\n              if (data.error.message === 'EMAIL_EXISTS') {\n                errorMessage = 'Email already exists';\n              }\n            }\n\n            throw new Error(errorMessage);\n          });\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isLogin ? 'Login' : 'Sign Up'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          required: true,\n          ref: emailRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          required: true,\n          ref: passwordRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          children: isLogin ? 'Login' : 'Create Account'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 45\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: classes.toggle,\n          onClick: switchAuthModeHandler,\n          children: isLogin ? 'Create new account' : 'Login with existing account'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthForm, \"rumziy2QAAWlkSyCRXBgRJhElRk=\");\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["C:/Users/Uch/React/udemy course/authentication/src/components/Auth/AuthForm.js"],"names":["useState","useRef","authApi","LoadingSpinner","classes","AuthForm","isLogin","setIsLogin","isLoading","setIsLoading","emailRef","passwordRef","switchAuthModeHandler","prevState","onSubmitHandler","event","preventDefault","userEmail","current","value","userPassword","signIn","then","res","ok","json","data","errorMessage","error","message","Error","authCtx","token","idToken","catch","err","alert","signUP","auth","control","actions","toggle"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react';\nimport { authApi } from '../../api/auth-api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './AuthForm.module.css';\n\nconst AuthForm = () => {\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const emailRef = useRef();\n  const passwordRef = useRef();\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const onSubmitHandler = (event) => {\n    event.preventDefault();\n    const userEmail = emailRef.current.value;\n    const userPassword = passwordRef.current.value;\n\n\n    if (isLogin) {\n      setIsLoading(true)\n      authApi.signIn(userEmail, userPassword)\n      .then((res) => {\n            setIsLoading(false);\n            if(res.ok) {\n              return res.json()\n            } else {\n              return res.json().then( data => {\n                  let errorMessage = 'Unsuccessful!'\n                  if(data && data.error && data.error.message) {\n                    if (data.error.message === 'EMAIL_NOT_FOUND' || 'INVALID_PASSWORD') {\n                        errorMessage = 'Email or password is incorrect'\n              }}\n               throw new Error(errorMessage);\n            });\n            }\n        })\n        .then((data) => {\n          authCtx.token(data.idToken);\n        })\n        .catch((err) => {\n            alert(err.message)\n        })\n      } else {\n        setIsLoading(true)\n    authApi.signUP(userEmail, userPassword)\n    .then( (res) => {\n      setIsLoading(false);\n         if(res.ok) {\n           return  res.json()\n         } else {\n          return res.json().then( data => {\n              let errorMessage = `Attempt's failed!`\n              if(data && data.error && data.error.message) {\n                  if (data.error.message === 'EMAIL_EXISTS') {\n                  errorMessage = 'Email already exists'\n          }}\n          throw new Error(errorMessage);\n             });\n         }\n     })\n  }\n\n  }\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\n      <form onSubmit={onSubmitHandler}>\n        <div className={classes.control}>\n          <label htmlFor='email'>Your Email</label>\n          <input type='email' id='email' required ref={emailRef}/>\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='password'>Your Password</label>\n          <input type='password' id='password' required ref={passwordRef}/>\n        </div>\n        <div className={classes.actions}>\n          {isLoading ? <LoadingSpinner /> : <button>{isLogin ? 'Login' : 'Create Account'}</button>}\n          <button\n            type='button'\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? 'Create new account' : 'Login with existing account'}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}